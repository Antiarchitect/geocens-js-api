{"name":"Geocens-js-api","tagline":"GeoCENS JavaScript API for Sensor Data Access and Visualization","body":"# GeoCENS JavaScript API\r\n\r\nThe GeoCENS JavaScript API can be used to retrieve geospatial sensor data from either the GeoCENS Data Service or OGC SOS compatible services, and display the information on a map or chart.\r\n\r\n## Requirements\r\n\r\n* jQuery 1.10.1 or newer\r\n\r\n## Installation\r\n\r\nFor a web page, include the `geocens.js` file in a script tag:\r\n\r\n\t<script src=\"javascripts/geocens.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n\r\n### Alternate Install for Rails\r\n\r\nFor use with the Rails asset pipeline, try the [geocens-js-api-rails](https://github.com/Canarie-Sensor-RPI/geocens-js-api-rails) gem.\r\n\r\n## Getting Started\r\n\r\nHere is a brief introduction on how to retrieve data from the GeoCENS Data Service, with an API Key. If you do not already have a key, please contact us at <info@geocens.ca> or use the JS API to load data from an OGC SOS compatible service. An [interactive demo is available in the `demo` directory](http://canarie-sensor-rpi.github.io/geocens-js-api/demo.html), and the API Key from there can be used here.\r\n\r\nIn this example, we will go from an API Key to retrieving a time series for a Datastream. A Datastream is a set of data returned for a single observed property on a sensor.\r\n\r\nFirst, we connect to the Data Service and download a list of sensors:\r\n\r\n\tGeocens.DataService.getSensors({\r\n\t\tapi_key: api_key,\r\n\t\tdone: function (sensors) {\r\n\t\t\twindow.sensor = sensors[0];\r\n\t\t}\r\n\t});\r\n\r\nThis provides us with a `Sensor` object in the `done` callback. We can retrieve properties for the Sensor:\r\n\r\n\tsensor.metadata;\r\n\r\nWhich returns an object with the properties:\r\n\r\n\t{\r\n\t\t\"id\": \"5C-86-4A-00-2C-9E\",\r\n\t\t\"user\": \"jamesbadger@gmail.com\",\r\n\t\t\"uid\": \"4ddecd5124661f9442cfca8be23f8dda\",\r\n\t\t\"altitude\": 1100,\r\n\t\t\"samplingrate\": 0,\r\n\t\t\"loc\": [\r\n\t\t\t51,\r\n\t\t\t-114\r\n\t\t],\r\n\t\t\"title\": \"Our first integration Testing\",\r\n\t\t\"height\": 0,\r\n\t\t\"nickName\": \"Alpha\",\r\n\t\t\"description\": \"\",\r\n\t\t\"last_time_online\": \"2012-09-18T21:04:40\",\r\n\t\t\"phens\": [\r\n\t\t\t\"airtemperature\",\r\n\t\t\t\"relatedhumidity\",\r\n\t\t\t\"airquality\",\r\n\t\t\t\"hydrogentest\",\r\n\t\t\t\"hydrogentest1Name\"\r\n\t\t]\r\n\t}\r\n\r\nWe can also use the Sensor object to retrieve the list of datastreams:\r\n\r\n\tsensor.getDatastreams({\r\n\t\tdone: function (datastreams) {\r\n\t\t\t\twindow.datastream = datastreams[0];\r\n\t\t}\r\n\t});\r\n\r\nWith this `Datastream` object, we can now retrieve the time series data:\r\n\r\n\tdatastream.getTimeSeries({\r\n\t\tdone: function (seriesData) {\r\n\t\t\t\twindow.seriesData = seriesData;\r\n\t\t}\r\n\t});\r\n\r\nBy default, `getTimeSeries()` will retrieve 24 hours of observation values from the Data Service.\r\n\r\nThe `getTimeSeries()` method will cache the results in the Datastream object, and return an array of objects:\r\n\r\n\t[{\r\n\t\ttimestamp: 1356998400000,\r\n\t\tvalue: 3.88\r\n\t},\r\n\t{\r\n\t\ttimestamp: 1369699200000,\r\n\t\tvalue: 5.22\r\n\t}]\r\n\r\nThe returned objects contain timestamp and value properties. The timestamps correspond to the number of milliseconds since January 1, 1970, 00:00:00 UTC. They can be parsed with JavaScript's built-in Date library: `new Date(1356998400000)`.\r\n\r\nAfterwards, the GeoCENS Map and GeoCENS Chart modules can be used to visualize the sensor and datastreams.\r\n\r\n## Usage\r\n\r\nPlease see the [API REFERENCE.markdown](https://github.com/Canarie-Sensor-RPI/geocens-js-api/blob/master/API_REFERENCE.markdown) document for details about specific functions and usage.\r\n\r\n## Running Test\r\n\r\nThere is a test suite for ensuring the JS API meets its requirements. The JS API is build with Behaviour Driven Development ([BDD](http://dannorth.net/introducing-bdd/)), which focuses on defining *requirements* before any code is written. This keeps new code clean and concise, only enough to satisfy the new behaviour.\r\n\r\nThe tests can be run in a web browser by opening the `test/index.html` file. They are based on [Qunit](http://qunitjs.com/).\r\n\r\nAlternatively, the tests can be run from the command line if Node and NPM is installed.\r\n\r\n\t$ npm install -g grunt-cli\r\n\t$ npm install\r\n\t$ grunt qunit\r\n\r\nSee `Gruntfile.js` for more tasks that can be run from the command line.\r\n\r\n## License\r\n\r\n2013, James Badger, Geo Sensor Web Lab, All Rights Reserved.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}